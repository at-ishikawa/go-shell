// Code generated by MockGen. DO NOT EDIT.
// Source: ./plugin.go

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	reflect "reflect"

	plugin "github.com/at-ishikawa/go-shell/internal/plugin"
	gomock "github.com/golang/mock/gomock"
)

// MockPlugin is a mock of Plugin interface.
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin.
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance.
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockPlugin) Command() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command")
	ret0, _ := ret[0].(string)
	return ret0
}

// Command indicates an expected call of Command.
func (mr *MockPluginMockRecorder) Command() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockPlugin)(nil).Command))
}

// Suggest mocks base method.
func (m *MockPlugin) Suggest(arg plugin.SuggestArg) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suggest", arg)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suggest indicates an expected call of Suggest.
func (mr *MockPluginMockRecorder) Suggest(arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suggest", reflect.TypeOf((*MockPlugin)(nil).Suggest), arg)
}
